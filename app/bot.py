import os
import asyncpg
import asyncio

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

load_dotenv()
bot_token = os.getenv('BOT_TOKEN')

bot = Bot(token=bot_token)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dispatcher —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
dp = Dispatcher(bot, storage=storage)

db_pool = None

async def create_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT')
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
class PurchaseStates(StatesGroup):
    waiting_for_quantity = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class BalanceStates(StatesGroup):
    waiting_for_amount = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def privet_command(message: types.Message):
    async with db_pool.acquire() as conn:  # –¢–µ–ø–µ—Ä—å conn –æ–±—ä—è–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        user_exists = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", message.from_user.id)
        
        if not user_exists:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
            await conn.execute("""
                INSERT INTO users (telegram_id, username, balance) 
                VALUES ($1, $2, $3)
            """, message.from_user.id, message.from_user.username, 0)  # –ë–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 0

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton("üîç–ö–∞—Ç–∞–ª–æ–≥"),
        KeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞"),
        KeyboardButton("üìñ–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
        KeyboardButton("üí∞–ú–æ–π –±–∞–ª–∞–Ω—Å")
    ]
    keyboard.add(*buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞!", reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üîç–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    await message.answer("üîç–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")

    async with db_pool.acquire() as conn:
        goods = await conn.fetch("SELECT id, name, description, quantity, price, image_url FROM goods")

    if goods:
        for product in goods:
            product_id, name, description, quantity, price, image_url = product
            product_message = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–¶–µ–Ω–∞: {price} —Ä—É–±."

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
            markup = InlineKeyboardMarkup()
            buy_button = InlineKeyboardButton("–ö—É–ø–∏—Ç—å üíµ", callback_data=f"buy_{product_id}_{quantity}_{price}")
            markup.add(buy_button)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–æ–π
            await message.answer_photo(image_url, caption=product_message, reply_markup=markup)
    else:
        await message.answer("–í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
async def buy_product(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    product_id, product_quantity, product_price = callback_query.data.split('_')[1:]
    product_id = int(product_id)
    product_quantity = int(product_quantity)
    product_price = float(product_price)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    await callback_query.message.answer(f"–°–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product_quantity}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id, product_quantity=product_quantity, product_price=product_price)
    
    await PurchaseStates.waiting_for_quantity.set()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=PurchaseStates.waiting_for_quantity)
async def get_product_quantity(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–æ—Ç–º–µ–Ω–∞"
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.finish()
        return

    try:
        quantity = int(message.text)
        user_data = await state.get_data()
        product_id = user_data['product_id']
        product_quantity = user_data['product_quantity']
        product_price = user_data['product_price']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if quantity > product_quantity:
            await message.answer(f"–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–æ: {product_quantity}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            async with db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO carts (user_id, product_id, price, quantity) 
                    VALUES ($1, $2, $3, $4)
                """, message.from_user.id, product_id, product_price, quantity)

            await message.answer(f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! {quantity} —à—Ç. –ø–æ —Ü–µ–Ω–µ {product_price} —Ä—É–±. –∑–∞ —à—Ç—É–∫—É.")
            await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda message: message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å image_url
    async with db_pool.acquire() as conn:
        cart_items = await conn.fetch("""
            SELECT g.name, g.price, g.image_url, c.id, c.quantity
            FROM carts c
            JOIN goods g ON c.product_id = g.id
            WHERE c.user_id = $1
        """, user_id)

    if cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:")

        total_sum = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for item in cart_items:
            name, price, image_url, cart_item_id, quantity = item

            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
            total_price = price * quantity
            total_sum += total_price  # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—É–º–º–µ

            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
            remove_button = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data=f"remove_{cart_item_id}")
            markup = InlineKeyboardMarkup().add(remove_button)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
            await message.answer_photo(
                image_url, 
                caption=f"{name} - {price} —Ä—É–±. (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.",
                reply_markup=markup
            )


        # –ö–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ"
        checkout_button = InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ", callback_data="checkout_order")
        checkout_markup = InlineKeyboardMarkup().add(checkout_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å –∫–Ω–æ–ø–∫–æ–π
        await message.answer(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_sum} —Ä—É–±.", reply_markup=checkout_markup)
    else:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(lambda call: call.data.startswith("remove_"))
async def remove_from_cart(call: types.CallbackQuery):
    cart_item_id = int(call.data.split("_")[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM carts WHERE id = $1", cart_item_id)

    await call.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(call.message)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.callback_query_handler(lambda c: c.data == "checkout_order")
async def process_checkout(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    async with db_pool.acquire() as conn:
        async with conn.transaction():  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance_row = await conn.fetchrow("SELECT balance FROM users WHERE telegram_id = $1", user_id)
            balance = balance_row["balance"] if balance_row else 0

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cart_items = await conn.fetch("""
                SELECT g.id, g.name, g.price, c.quantity
                FROM carts c
                JOIN goods g ON c.product_id = g.id
                WHERE c.user_id = $1
            """, user_id)

            if not cart_items:
                await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
            total_price = sum(item["price"] * item["quantity"] for item in cart_items)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞
            if balance < total_price:
                await callback_query.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
                await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
                return

            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute(
                "UPDATE users SET balance = balance - $1 WHERE telegram_id = $2", total_price, user_id
            )

            # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            order_row = await conn.fetchrow(
                "INSERT INTO orders (user_id, total_price) VALUES ($1, $2) RETURNING id",
                user_id, total_price
            )
            order_id = order_row["id"]

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ order_items
            await conn.executemany(
                "INSERT INTO order_items (order_id, product_name, quantity, price, total_price) VALUES ($1, $2, $3, $4, $5)",
                [(order_id, item["name"], item["quantity"], item["price"], item["price"] * item["quantity"]) for item in cart_items]
            )

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ goods
            await conn.executemany(
                "UPDATE goods SET quantity = GREATEST(quantity - $1, 0) WHERE id = $2",
                [(item["quantity"], item["id"]) for item in cart_items]
            )

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("DELETE FROM carts WHERE user_id = $1", user_id)

    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    await callback_query.message.answer(
        "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.\n"
        "–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'."
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
@dp.message_handler(lambda message: message.text == "üìñ–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    await message.answer("üìñ–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:")

    user_id = message.from_user.id

    async with db_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = await conn.fetch(
            "SELECT id, total_price, created_at FROM orders WHERE user_id = $1 ORDER BY created_at ASC",
            user_id
        )

        if not orders:
            await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        for order in orders:
            order_id = order["id"]
            total_price = order["total_price"]
            created_at = order["created_at"].strftime("%d.%m.%Y %H:%M")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ + image_url
            items = await conn.fetch("""
                SELECT oi.product_name, oi.quantity, oi.price, g.image_url
                FROM order_items oi
                JOIN goods g ON oi.product_name = g.name
                WHERE oi.order_id = $1
            """, order_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for item in items:
                product_name = item["product_name"]
                quantity = item["quantity"]
                price = item["price"]
                image_url = item["image_url"]

                text = (
                    f"üìã –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç {created_at}\n\n"
                    f"üì¶ {product_name} (x{quantity}) - {price} —Ä—É–± –∑–∞ 1—à—Ç.\n\n"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + —Ç–µ–∫—Å—Ç
                await message.answer_photo(photo=image_url, caption=text)

            await message.answer(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.")

    await message.answer("üë®üèª‚Äçüíª ***–ü–æ –ø–æ–≤–æ–¥—É —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\!***", parse_mode="MarkdownV2")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –±–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == "üí∞–ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db_pool.acquire() as conn:
        balance = await conn.fetchrow("SELECT COALESCE(balance, 0) FROM users WHERE telegram_id = $1", user_id)

    balance_value = balance[0] if balance else 0

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"))

    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance_value} —Ä—É–±.", reply_markup=markup)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@dp.callback_query_handler(lambda call: call.data == "top_up_balance")
async def top_up_balance(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞':")
    await BalanceStates.waiting_for_amount.set()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=BalanceStates.waiting_for_amount)
async def process_top_up_amount(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.finish()
        return
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        user_id = message.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        async with db_pool.acquire() as conn:
            await conn.execute("UPDATE users SET balance = balance + $1 WHERE telegram_id = $2", amount, user_id)

        await message.answer(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.")
        await state.finish()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


async def main():
    await create_db_pool()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await dp.start_polling()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
